/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GuardianExecutorInterface extends ethers.utils.Interface {
  functions: {
    "account()": FunctionFragment;
    "cancel(address,uint256,string,bytes,uint256)": FunctionFragment;
    "execute(address,uint256,string,bytes,uint256)": FunctionFragment;
    "getDelay()": FunctionFragment;
    "initialize(address,uint256,uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "queue(address,uint256,string,bytes,uint256)": FunctionFragment;
    "transactionQueue(bytes32)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "account", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [string, BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getDelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queue",
    values: [string, BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionQueue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "account", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "TransactionCancelled(bytes32,address,uint256,string,bytes,uint256)": EventFragment;
    "TransactionExecuted(bytes32,address,uint256,string,bytes,uint256)": EventFragment;
    "TransactionQueued(bytes32,address,uint256,string,bytes,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type TransactionCancelledEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber] & {
    txHash: string;
    target: string;
    value: BigNumber;
    signature: string;
    data: string;
    eta: BigNumber;
  }
>;

export type TransactionExecutedEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber] & {
    txHash: string;
    target: string;
    value: BigNumber;
    signature: string;
    data: string;
    eta: BigNumber;
  }
>;

export type TransactionQueuedEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber] & {
    txHash: string;
    target: string;
    value: BigNumber;
    signature: string;
    data: string;
    eta: BigNumber;
  }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class GuardianExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GuardianExecutorInterface;

  functions: {
    account(overrides?: CallOverrides): Promise<[string]>;

    cancel(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _account: string,
      _delay: BigNumberish,
      _expirePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    queue(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transactionQueue(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  account(overrides?: CallOverrides): Promise<string>;

  cancel(
    _target: string,
    _value: BigNumberish,
    _signature: string,
    _data: BytesLike,
    _eta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _target: string,
    _value: BigNumberish,
    _signature: string,
    _data: BytesLike,
    _eta: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDelay(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _account: string,
    _delay: BigNumberish,
    _expirePeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  queue(
    _target: string,
    _value: BigNumberish,
    _signature: string,
    _data: BytesLike,
    _eta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transactionQueue(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    account(overrides?: CallOverrides): Promise<string>;

    cancel(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDelay(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _account: string,
      _delay: BigNumberish,
      _expirePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    queue(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transactionQueue(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "TransactionCancelled(bytes32,address,uint256,string,bytes,uint256)"(
      txHash?: null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        txHash: string;
        target: string;
        value: BigNumber;
        signature: string;
        data: string;
        eta: BigNumber;
      }
    >;

    TransactionCancelled(
      txHash?: null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        txHash: string;
        target: string;
        value: BigNumber;
        signature: string;
        data: string;
        eta: BigNumber;
      }
    >;

    "TransactionExecuted(bytes32,address,uint256,string,bytes,uint256)"(
      txHash?: null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        txHash: string;
        target: string;
        value: BigNumber;
        signature: string;
        data: string;
        eta: BigNumber;
      }
    >;

    TransactionExecuted(
      txHash?: null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        txHash: string;
        target: string;
        value: BigNumber;
        signature: string;
        data: string;
        eta: BigNumber;
      }
    >;

    "TransactionQueued(bytes32,address,uint256,string,bytes,uint256)"(
      txHash?: null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        txHash: string;
        target: string;
        value: BigNumber;
        signature: string;
        data: string;
        eta: BigNumber;
      }
    >;

    TransactionQueued(
      txHash?: null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, BigNumber],
      {
        txHash: string;
        target: string;
        value: BigNumber;
        signature: string;
        data: string;
        eta: BigNumber;
      }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    account(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDelay(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _account: string,
      _delay: BigNumberish,
      _expirePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    queue(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transactionQueue(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    account(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _account: string,
      _delay: BigNumberish,
      _expirePeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queue(
      _target: string,
      _value: BigNumberish,
      _signature: string,
      _data: BytesLike,
      _eta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transactionQueue(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
