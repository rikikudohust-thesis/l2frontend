/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GuardianManagerInterface extends ethers.utils.Interface {
  functions: {
    "account()": FunctionFragment;
    "addGuardian(address)": FunctionFragment;
    "changeOwner(bytes32,bytes,bytes)": FunctionFragment;
    "checkMultisig(bytes32,bytes,bytes)": FunctionFragment;
    "checkSignatures(bytes32,bytes,bytes,uint256)": FunctionFragment;
    "executor()": FunctionFragment;
    "guardianCount()": FunctionFragment;
    "guardians(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeGuardian(address)": FunctionFragment;
    "setThershold(uint256)": FunctionFragment;
    "setupGuardians(address[],uint256)": FunctionFragment;
    "threshold()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "account", values?: undefined): string;
  encodeFunctionData(functionFragment: "addGuardian", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMultisig",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guardianCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardians", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeGuardian",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setThershold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupGuardians",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "account", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guardianCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardians", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThershold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupGuardians",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "GuardianAdded(address)": EventFragment;
    "GuardianRemoved(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ThresholdChanged(uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type GuardianAddedEvent = TypedEvent<[string] & { guardian: string }>;

export type GuardianRemovedEvent = TypedEvent<[string] & { guardian: string }>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type ThresholdChangedEvent = TypedEvent<
  [BigNumber] & { threshold: BigNumber }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class GuardianManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GuardianManagerInterface;

  functions: {
    account(overrides?: CallOverrides): Promise<[string]>;

    addGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkMultisig(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    guardianCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    guardians(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _executor: string,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThershold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupGuardians(
      _guardians: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  account(overrides?: CallOverrides): Promise<string>;

  addGuardian(
    _guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeOwner(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkMultisig(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkSignatures(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    requiredSignatures: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  executor(overrides?: CallOverrides): Promise<string>;

  guardianCount(overrides?: CallOverrides): Promise<BigNumber>;

  guardians(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _executor: string,
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeGuardian(
    _guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThershold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupGuardians(
    _guardians: string[],
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    account(overrides?: CallOverrides): Promise<string>;

    addGuardian(_guardian: string, overrides?: CallOverrides): Promise<void>;

    changeOwner(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    checkMultisig(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executor(overrides?: CallOverrides): Promise<string>;

    guardianCount(overrides?: CallOverrides): Promise<BigNumber>;

    guardians(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _executor: string,
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeGuardian(_guardian: string, overrides?: CallOverrides): Promise<void>;

    setThershold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setupGuardians(
      _guardians: string[],
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "GuardianAdded(address)"(
      guardian?: string | null
    ): TypedEventFilter<[string], { guardian: string }>;

    GuardianAdded(
      guardian?: string | null
    ): TypedEventFilter<[string], { guardian: string }>;

    "GuardianRemoved(address)"(
      guardian?: string | null
    ): TypedEventFilter<[string], { guardian: string }>;

    GuardianRemoved(
      guardian?: string | null
    ): TypedEventFilter<[string], { guardian: string }>;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "ThresholdChanged(uint256)"(
      threshold?: null
    ): TypedEventFilter<[BigNumber], { threshold: BigNumber }>;

    ThresholdChanged(
      threshold?: null
    ): TypedEventFilter<[BigNumber], { threshold: BigNumber }>;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    account(overrides?: CallOverrides): Promise<BigNumber>;

    addGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeOwner(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkMultisig(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    guardianCount(overrides?: CallOverrides): Promise<BigNumber>;

    guardians(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _executor: string,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThershold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupGuardians(
      _guardians: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    account(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkMultisig(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardianCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardians(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _executor: string,
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThershold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupGuardians(
      _guardians: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
